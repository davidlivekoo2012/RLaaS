---
# Ingress for RLaaS API
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rlaas-ingress
  namespace: rlaas-system
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
spec:
  rules:
  - host: rlaas.local
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: rlaas-api
            port:
              number: 8000
      - path: /inference
        pathType: Prefix
        backend:
          service:
            name: rlaas-inference
            port:
              number: 8001
      - path: /mlflow
        pathType: Prefix
        backend:
          service:
            name: mlflow
            port:
              number: 5000
      - path: /minio
        pathType: Prefix
        backend:
          service:
            name: minio
            port:
              number: 9001

---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: rlaas-system
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus/'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=200h'
        - '--web.enable-lifecycle'
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/
        - name: prometheus-storage
          mountPath: /prometheus/
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-pvc

---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: rlaas-system
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
  type: ClusterIP

---
# Prometheus PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: rlaas-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
# Prometheus ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: rlaas-system
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    rule_files:
      - "rlaas_rules.yml"

    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      - job_name: 'rlaas-api'
        static_configs:
          - targets: ['rlaas-api:8000']
        metrics_path: '/metrics'
        scrape_interval: 10s

      - job_name: 'rlaas-inference'
        static_configs:
          - targets: ['rlaas-inference:8001']
        metrics_path: '/metrics'
        scrape_interval: 10s

      - job_name: 'postgres'
        static_configs:
          - targets: ['postgres:5432']

      - job_name: 'redis'
        static_configs:
          - targets: ['redis:6379']

      - job_name: 'kafka'
        static_configs:
          - targets: ['kafka:9092']

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
            - rlaas-system
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)

  rlaas_rules.yml: |
    groups:
    - name: rlaas_alerts
      rules:
      - alert: RLaaSAPIDown
        expr: up{job="rlaas-api"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "RLaaS API is down"
          description: "RLaaS API has been down for more than 1 minute."

      - alert: RLaaSHighLatency
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job="rlaas-api"}[5m])) > 1
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "RLaaS API high latency"
          description: "95th percentile latency is above 1 second."

      - alert: RLaaSHighErrorRate
        expr: rate(http_requests_total{job="rlaas-api",status=~"5.."}[5m]) / rate(http_requests_total{job="rlaas-api"}[5m]) > 0.05
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "RLaaS API high error rate"
          description: "Error rate is above 5%."

      - alert: DatabaseConnectionsHigh
        expr: pg_stat_activity_count > 80
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High database connections"
          description: "Database has more than 80 active connections."

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: rlaas-system
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana/provisioning
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-config
        configMap:
          name: grafana-config

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: rlaas-system
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP

---
# Grafana PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: rlaas-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
# Grafana ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: rlaas-system
data:
  datasources.yml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true

  dashboards.yml: |
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards

---
# HPA for RLaaS API
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: rlaas-api-hpa
  namespace: rlaas-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: rlaas-api
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# HPA for RLaaS Inference
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: rlaas-inference-hpa
  namespace: rlaas-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: rlaas-inference
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70

---
# Network Policy for RLaaS
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: rlaas-network-policy
  namespace: rlaas-system
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: rlaas-system
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: rlaas-system
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
