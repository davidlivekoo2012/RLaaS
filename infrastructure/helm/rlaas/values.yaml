# Default values for RLaaS platform
# This is a YAML-formatted file.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Image configuration
image:
  registry: docker.io
  repository: rlaas/rlaas
  tag: "latest"
  pullPolicy: IfNotPresent

# Environment configuration
environment: production
debug: false

# API Gateway configuration
apiGateway:
  enabled: true
  replicaCount: 3
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 8000
    annotations: {}
  
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    hosts:
      - host: api.rlaas.local
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: rlaas-api-tls
        hosts:
          - api.rlaas.local
  
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "500m"
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

# Optimization Engine configuration
optimizationEngine:
  enabled: true
  replicaCount: 2
  
  resources:
    requests:
      memory: "1Gi"
      cpu: "500m"
    limits:
      memory: "4Gi"
      cpu: "2000m"
  
  config:
    populationSize: 100
    generations: 500
    algorithms:
      - nsga3
      - moead
  
  persistence:
    enabled: true
    storageClass: ""
    size: 10Gi

# Policy Engine configuration
policyEngine:
  enabled: true
  replicaCount: 2
  
  resources:
    requests:
      memory: "2Gi"
      cpu: "1000m"
      nvidia.com/gpu: "0"
    limits:
      memory: "8Gi"
      cpu: "4000m"
      nvidia.com/gpu: "1"
  
  nodeSelector:
    accelerator: nvidia-tesla-v100
  
  tolerations:
    - key: nvidia.com/gpu
      operator: Exists
      effect: NoSchedule
  
  persistence:
    models:
      enabled: true
      storageClass: ""
      size: 50Gi
      accessMode: ReadWriteMany
    data:
      enabled: true
      storageClass: ""
      size: 20Gi

# Scheduler configuration
scheduler:
  enabled: true
  replicaCount: 1
  
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "2Gi"
      cpu: "1000m"

# Model Registry configuration
modelRegistry:
  enabled: true
  replicaCount: 2
  
  resources:
    requests:
      memory: "1Gi"
      cpu: "500m"
    limits:
      memory: "4Gi"
      cpu: "2000m"
  
  persistence:
    enabled: true
    storageClass: ""
    size: 100Gi

# Training Orchestrator configuration
trainingOrchestrator:
  enabled: true
  replicaCount: 1
  
  resources:
    requests:
      memory: "1Gi"
      cpu: "500m"
    limits:
      memory: "4Gi"
      cpu: "2000m"

# Inference Service configuration
inferenceService:
  enabled: true
  replicaCount: 3
  
  resources:
    requests:
      memory: "1Gi"
      cpu: "500m"
    limits:
      memory: "4Gi"
      cpu: "2000m"
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 20
    targetCPUUtilizationPercentage: 70

# Web Console configuration
webConsole:
  enabled: true
  replicaCount: 2
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
    hosts:
      - host: console.rlaas.local
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: rlaas-console-tls
        hosts:
          - console.rlaas.local
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "250m"

# Database configuration (PostgreSQL)
postgresql:
  enabled: true
  auth:
    postgresPassword: "rlaas_password"
    username: "rlaas"
    password: "rlaas_password"
    database: "rlaas"
  
  primary:
    persistence:
      enabled: true
      size: 100Gi
      storageClass: ""
    
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
      limits:
        memory: "4Gi"
        cpu: "2000m"
    
    configuration: |
      max_connections = 200
      shared_buffers = 256MB
      effective_cache_size = 1GB
      maintenance_work_mem = 64MB
      checkpoint_completion_target = 0.9
      wal_buffers = 16MB
      default_statistics_target = 100
      random_page_cost = 1.1
      effective_io_concurrency = 200
      work_mem = 4MB
      min_wal_size = 1GB
      max_wal_size = 4GB

# Redis configuration
redis:
  enabled: true
  auth:
    enabled: false
  
  master:
    persistence:
      enabled: true
      size: 5Gi
      storageClass: ""
    
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "1Gi"
        cpu: "500m"

# Kafka configuration
kafka:
  enabled: true
  persistence:
    enabled: true
    size: 10Gi
    storageClass: ""
  
  resources:
    requests:
      memory: "1Gi"
      cpu: "500m"
    limits:
      memory: "4Gi"
      cpu: "2000m"

# MinIO configuration (Object Storage)
minio:
  enabled: true
  auth:
    rootUser: "minioadmin"
    rootPassword: "minioadmin"
  
  persistence:
    enabled: true
    size: 500Gi
    storageClass: ""
  
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "2Gi"
      cpu: "1000m"

# MLflow configuration
mlflow:
  enabled: true
  replicaCount: 1
  
  service:
    type: ClusterIP
    port: 5000
  
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "2Gi"
      cpu: "1000m"
  
  persistence:
    enabled: true
    size: 50Gi
    storageClass: ""

# Monitoring configuration
monitoring:
  enabled: true
  
  prometheus:
    enabled: true
    server:
      persistentVolume:
        enabled: true
        size: 50Gi
        storageClass: ""
  
  grafana:
    enabled: true
    adminPassword: "admin"
    persistence:
      enabled: true
      size: 10Gi
      storageClass: ""

# Security configuration
security:
  networkPolicies:
    enabled: true
  
  podSecurityPolicy:
    enabled: true
  
  rbac:
    enabled: true

# Service Account configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod Security Context
podSecurityContext:
  fsGroup: 2000

# Security Context
securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1
