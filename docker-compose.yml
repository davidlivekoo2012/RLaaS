version: '3.8'

services:
  # Core API Gateway
  api-gateway:
    build:
      context: .
      target: development
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://rlaas:rlaas@postgres:5432/rlaas
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
    depends_on:
      - postgres
      - redis
      - kafka
      - mlflow
    networks:
      - rlaas-network

  # Web Console
  web-console:
    build:
      context: ./src/ui/web-console
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - API_BASE_URL=http://api-gateway:8000
    depends_on:
      - api-gateway
    networks:
      - rlaas-network

  # Multi-Objective Optimization Engine
  optimization-engine:
    build:
      context: .
      target: development
    command: ["python", "-m", "rlaas.core.optimization.engine"]
    environment:
      - DATABASE_URL=postgresql://rlaas:rlaas@postgres:5432/rlaas
      - REDIS_URL=redis://redis:6379/1
    volumes:
      - ./src:/app/src
    depends_on:
      - postgres
      - redis
    networks:
      - rlaas-network

  # Training Orchestrator
  training-orchestrator:
    build:
      context: .
      target: development
    command: ["python", "-m", "rlaas.training.orchestrator"]
    environment:
      - DATABASE_URL=postgresql://rlaas:rlaas@postgres:5432/rlaas
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - ./src:/app/src
      - ./data:/app/data
    depends_on:
      - postgres
      - mlflow
      - kafka
    networks:
      - rlaas-network

  # Model Serving
  model-serving:
    build:
      context: .
      target: development
    command: ["python", "-m", "rlaas.inference.serving"]
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://rlaas:rlaas@postgres:5432/rlaas
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - REDIS_URL=redis://redis:6379/2
    volumes:
      - ./src:/app/src
      - ./models:/app/models
    depends_on:
      - postgres
      - mlflow
      - redis
    networks:
      - rlaas-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=rlaas
      - POSTGRES_USER=rlaas
      - POSTGRES_PASSWORD=rlaas
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - rlaas-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rlaas-network

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - rlaas-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - rlaas-network

  # MLflow Tracking Server
  mlflow:
    image: python:3.11-slim
    command: >
      bash -c "pip install mlflow psycopg2-binary &&
               mlflow server --host 0.0.0.0 --port 5000 
               --backend-store-uri postgresql://rlaas:rlaas@postgres:5432/mlflow
               --default-artifact-root /mlflow/artifacts"
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://rlaas:rlaas@postgres:5432/mlflow
    volumes:
      - mlflow_data:/mlflow
    depends_on:
      - postgres
    networks:
      - rlaas-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    networks:
      - rlaas-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - rlaas-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - rlaas-network

volumes:
  postgres_data:
  redis_data:
  mlflow_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  rlaas-network:
    driver: bridge
